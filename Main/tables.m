;---------------------------------------
;
;	pre-generated page tables

;	align	0x100

reverse_pixels::
	byte	0x00,0x40,0x80,0xC0, 0x10,0x50,0x90,0xD0  ; L-R pixel reversal
	byte	0x20,0x60,0xA0,0xE0, 0x30,0x70,0xB0,0xF0
	byte	0x04,0x44,0x84,0xC4, 0x14,0x54,0x94,0xD4
	byte	0x24,0x64,0xA4,0xE4, 0x34,0x74,0xB4,0xF4
	byte	0x08,0x48,0x88,0xC8, 0x18,0x58,0x98,0xD8
	byte	0x28,0x68,0xA8,0xE8, 0x38,0x78,0xB8,0xF8
	byte	0x0C,0x4C,0x8C,0xCC, 0x1C,0x5C,0x9C,0xDC
	byte	0x2C,0x6C,0xAC,0xEC, 0x3C,0x7C,0xBC,0xFC

	byte	0x01,0x41,0x81,0xC1, 0x11,0x51,0x91,0xD1
	byte	0x21,0x61,0xA1,0xE1, 0x31,0x71,0xB1,0xF1
	byte	0x05,0x45,0x85,0xC5, 0x15,0x55,0x95,0xD5
	byte	0x25,0x65,0xA5,0xE5, 0x35,0x75,0xB5,0xF5
	byte	0x09,0x49,0x89,0xC9, 0x19,0x59,0x99,0xD9
	byte	0x29,0x69,0xA9,0xE9, 0x39,0x79,0xB9,0xF9
	byte	0x0D,0x4D,0x8D,0xCD, 0x1D,0x5D,0x9D,0xDD
	byte	0x2D,0x6D,0xAD,0xED, 0x3D,0x7D,0xBD,0xFD

	byte	0x02,0x42,0x82,0xC2, 0x12,0x52,0x92,0xD2
	byte	0x22,0x62,0xA2,0xE2, 0x32,0x72,0xB2,0xF2
	byte	0x06,0x46,0x86,0xC6, 0x16,0x56,0x96,0xD6
	byte	0x26,0x66,0xA6,0xE6, 0x36,0x76,0xB6,0xF6
	byte	0x0A,0x4A,0x8A,0xCA, 0x1A,0x5A,0x9A,0xDA
	byte	0x2A,0x6A,0xAA,0xEA, 0x3A,0x7A,0xBA,0xFA
	byte	0x0E,0x4E,0x8E,0xCE, 0x1E,0x5E,0x9E,0xDE
	byte	0x2E,0x6E,0xAE,0xEE, 0x3E,0x7E,0xBE,0xFE

	byte	0x03,0x43,0x83,0xC3, 0x13,0x53,0x93,0xD3
	byte	0x23,0x63,0xA3,0xE3, 0x33,0x73,0xB3,0xF3
	byte	0x07,0x47,0x87,0xC7, 0x17,0x57,0x97,0xD7
	byte	0x27,0x67,0xA7,0xE7, 0x37,0x77,0xB7,0xF7
	byte	0x0B,0x4B,0x8B,0xCB, 0x1B,0x5B,0x9B,0xDB
	byte	0x2B,0x6B,0xAB,0xEB, 0x3B,0x7B,0xBB,0xFB
	byte	0x0F,0x4F,0x8F,0xCF, 0x1F,0x5F,0x9F,0xDF
	byte	0x2F,0x6F,0xAF,0xEF, 0x3F,0x7F,0xBF,0xFF



function  bluemask (index)
{
	mvariable i = index
	mvariable mask = 3
	mvariable result = 0
	mvariable counter

	mfor (counter=0, counter<4, counter++) {
		mif (i % 4 == 0) {
			result += mask
		}
		i /= 4
		mask *= 4
	}
	freturn (result)
}

	variable i = 0
bluescreen::
	repeat (256) {
		byte	bluemask (i)
		i++
	}


ora_table::					; for 01 = transparent
	i = 0
	variable j
	variable var0
	variable var1
	variable var2
	variable var3

	repeat (256) {
		j = i
		var0 = j & 3			; break byte into quads
		j /=4
		var1 = j & 3
		j /=4
		var2 = j & 3
		j /=4
		var3 = j

		mif (var0 == 1) { var0 = 0 }	; turn 01's into 00's
		mif (var1 == 1) { var1 = 0 }
		mif (var2 == 1) { var2 = 0 }
		mif (var3 == 1) { var3 = 0 }
		
		byte	var3*64+var2*16+var1*4+var0
		i++
	}



mask_blue::				; mask out blue colored pixels
	i = 0
	variable r0
	variable r1
	variable r2
	variable r3

	repeat (256) {
		r0 = 0
		r1 = 0
		r2 = 0
		r3 = 0

		j = i
		var0 = j & 3			; break byte into quads
		j /=4
		var1 = j & 3
		j /=4
		var2 = j & 3
		j /=4
		var3 = j

		mif (var0 == 1) { r0 = 3 }	; turn 01's into 00's
		mif (var1 == 1) { r1 = 3 }
		mif (var2 == 1) { r2 = 3 }
		mif (var3 == 1) { r3 = 3 }
		
		byte	r3*64+r2*16+r1*4+r0
		i++
	}
